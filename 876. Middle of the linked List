# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # One of the approach would be finding the length of the LL and divide by 2 . Then traverse until u reach half then di delete operation . 
        # but this takes 2 iterations
        
        # to traverse to the middle of the linked list 
        # have 2 pointers 
        # one traversing this.next , then the other one traversing this.next.next
        # when the send pointer reaches last , the first pointer will be in the middle
        # this has O(n) as time complexity and O(1) as space complexity
        
        fast=head
        slow=head
        while slow and slow.next:
            fast=fast.next
            slow=slow.next.next
        return fast     
        
