# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:
        # To delete a node, we need to assign the next node to the previous node. Let's use curr to denote the current node, and prev to denote the previous node
        # while anlaysing the solution we have 4 cases :
        
        # 1. Node to remove is at the end of the linked list.
        # Input: head = [6,1,2,6,3,4,5,6], val = 6
		    #				                    /   \
		    #				                  prev curr
        # we can set prev.next = None, since curr.next == None. No further action is needed since this is the last node to check.
        
        # 2. Node to remove is in the middle of the linked list.
        # Input: head = [6,1,2,6,3,4,5,6], val = 6
		    #		                /   \
		    #		              prev curr
        # we can set prev.next=current.next to remove the node
        # current=current.next for next iteration
        
        # 3. Node to remove is at the start of the linked list.
        #  Input: head = [6,1,2,6,3,4,5,6], val = 6
		    #  	          /   \
	      #          prev curr
        # if it is ar start we can not set prev.next=current.next because prev=None . As prev.next would be head of the list we can write head=current.next to remove before proceeding to case2
        # current=current.next for iteration
        
        # 4. Current node is not to be removed.
        # Input: head = [6,1,2,6,3,4,5,6], val = 6
		    #	                /   \
        #               prev curr
        # Nothing needs to be done, we just need to proceed with the next iteration. This involves:
        # curr = curr.next, as discussed in cases 2 and 3;
        # prev = curr, since the curr node is not removed in this case.
        
        
        prev, current = None, head
        
        while current:
            if current.val==val:# case 1-3
                if prev:# case 1 and 2
                    prev.next=current.next
                else:
                    head=current.next
                current=current.next     
            else:
                prev=current
                current=current.next # case 4
                
              
        return head          
                
                
